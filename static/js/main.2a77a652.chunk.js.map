{"version":3,"sources":["components/Clippy.tsx","components/ClippyStage.tsx","pages/NewProjectPage.tsx","pages/HomePage.tsx","images/footer.svg","App.tsx","i18n/index.ts","reportWebVitals.ts","index.tsx"],"names":["blink","keyframes","rolleye","focus","svgStyles","css","Clippy","variant","className","viewBox","fill","xmlns","d","stroke","strokeWidth","cx","cy","r","strokeLinecap","id","x1","y1","x2","y2","gradientUnits","stopColor","offset","Container","ContentContainer","ClippyContainer","ClippyStage","children","MainContainer","Slide","props","show","ButtonContainer","Button","defaultState","currentSlide","clippyVariant","NewProjectPage","useState","state","setState","updateState","newState","prevState","t","useTranslation","isCurrentSlide","slide","Helmet","type","onClick","projectPhase","targetAudience","toolType","sensitiveData","loginNeeded","apiNeeded","similarToolAvailable","Trans","responsibility","console","log","HomePage","Footer","FooterImage","App","path","i18n","use","initReactI18next","init","resources","en","translation","new_project_page","title","slides","evaluation","text","todo","contact_itkom","define_po","define_api_consumption","check_existing","check_login","answers","buttons","idea","implementation","bundesebene","canton","external","dataProcessing","contentOnly","yes","no","maybe","midata","other","similarToolAvailableMaybe","ok","fr","lng","interpolation","escapeValue","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2a77a652.chunk.js","sourcesContent":["import React from 'react'\nimport { keyframes, css } from '@emotion/react'\n\nconst blink = keyframes`\n  from, 8%, 12%, to {\n    fill: black;\n  }\n  10% {\n    fill: transparent;\n  }\n  `\n\nconst rolleye = keyframes`\n  from, 8%, 12%, 16%, 20%, 30%, 50%, to  {\n    transform: translate(0, 0);\n    fill: black;\n  }\n  10%, 18% {\n    fill: transparent;\n  }\n  35%, 45% {\n    transform: translate(0, -15px)\n  }\n`\n\nconst focus = keyframes`\n  from, 8%, 12%, 30%, 70%, 88%, 92%, to  {\n    transform: translate(0, 0);\n    fill: black;\n  }\n  10%, 90% {\n    fill: transparent;\n  }\n  35%, 65% {\n    transform: translate(-8px, -8px)\n  }\n  `\n\nconst svgStyles = css`\nwidth: 8vh;\n.brows {\n  opacity: 0;\n}\n\n  .pupil {\n    animation: ${blink} 3s ease infinite;\n    transition: translate;\n  }\n\n  &.rolleye {\n    .pupil {\n      animation: ${rolleye} 5s ease-in-out infinite;\n    }\n  }\n\n  &.focus {\n    .pupil {\n      animation: ${focus} 5s ease-in-out infinite;\n    }\n  }\n\n  &.angry {\n    .brows {\n      opacity: 1;\n    }\n    .pupil {\n      animation: ${focus} 5s ease-in-out infinite;\n    }\n  }\n`\n\ninterface ClippyProps {\n  variant?: \"\" | \"focus\" | \"rolleye\" | 'angry';\n}\n\nexport default function Clippy({ variant }: ClippyProps) {\n  return <svg className={variant} css={svgStyles} viewBox=\"0 0 91 248\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M31 104C31 104 31 128.5 31 156C31 183.5 66 184 66 156C66 128 66 84.5 66 40C66 -4.5 19 -9.5 19 40C19 89.5 19 151 19 199C19 247 78 248 78 199C78 150 78 104 78 104\" stroke=\"#A7A7A7\" strokeWidth=\"8\" />\n    <circle className=\"eye\" cx=\"20\" cy=\"74\" r=\"19.5\" fill=\"url(#paint0_linear)\" stroke=\"black\" />\n    <circle className=\"pupil\" cx=\"19.5\" cy=\"73.5\" r=\"4.5\" fill=\"black\" />\n    <circle className=\"eye\" cx=\"71\" cy=\"74\" r=\"19.5\" fill=\"url(#paint1_linear)\" stroke=\"black\" />\n    <circle className=\"pupil\" cx=\"70.5\" cy=\"73.5\" r=\"4.5\" fill=\"black\" />\n    <path className=\"brows\" d=\"M4 36L38 60\" stroke=\"black\" strokeWidth=\"8\" strokeLinecap=\"round\" />\n    <path className=\"brows\" d=\"M89 36L55 60\" stroke=\"black\" strokeWidth=\"8\" strokeLinecap=\"round\" />\n    <defs>\n      <linearGradient id=\"paint0_linear\" x1=\"11.5\" y1=\"65\" x2=\"29\" y2=\"94\" gradientUnits=\"userSpaceOnUse\">\n        <stop stopColor=\"#F2F2F2\" />\n        <stop offset=\"1\" stopColor=\"#CECECE\" />\n      </linearGradient>\n      <linearGradient id=\"paint1_linear\" x1=\"62.5\" y1=\"65\" x2=\"80\" y2=\"94\" gradientUnits=\"userSpaceOnUse\">\n        <stop stopColor=\"#F2F2F2\" />\n        <stop offset=\"1\" stopColor=\"#CECECE\" />\n      </linearGradient>\n    </defs>\n  </svg>\n\n}\n","import React, { PropsWithChildren } from 'react'\nimport styled from '@emotion/styled'\nimport Clippy from './Clippy'\n\nconst Container = styled.div`\n  background: url(\"data:image/svg+xml,<svg width='779' height='468' viewBox='0 0 779 468' fill='none' xmlns='http://www.w3.org/2000/svg'><ellipse cx='389.5' cy='234' rx='389.5' ry='234' fill='rgb(255,255,255)' fill-opacity='0.1'/></svg>\");\n  background-size: contain;\n  background-repeat: no-repeat;\n  background-position: center;\n  display: flex;\n  height: 100%;\n  justify-content: space-between;\n  max-width: 800px;\n  margin: 0 auto;\n`\n\nconst ContentContainer = styled.div`\n  background-color: white;\n  border-radius: 1em;\n  box-shadow: .5em .5em 2em rgba(0,0,0,0.25);\n  color: black;\n  padding: 1em;\n  margin-bottom: 2em;\n  margin-right: 1em;\n  width: 80%;\n`\n\nconst ClippyContainer = styled.div`\nposition: sticky;\ntop: 40vh;\nalign-self: flex-start;\n`\n\ntype ClippyStageProps = PropsWithChildren<{\n  variant?: \"\" | \"focus\" | \"rolleye\" | 'angry';\n}>\n\nexport default function ClippyStage({ children, variant }: ClippyStageProps) {\n  return <Container>\n    <ContentContainer>\n      {children}\n    </ContentContainer>\n    <ClippyContainer>\n      <Clippy variant={variant}></Clippy>\n    </ClippyContainer>\n  </Container>\n}\n","import styled from '@emotion/styled'\nimport React, { useState } from 'react'\nimport ClippyStage from '../components/ClippyStage'\nimport { useTranslation, Trans } from 'react-i18next';\nimport { Helmet } from 'react-helmet'\n\nconst MainContainer = styled.main`\n  padding: 1rem;\n  flex-grow: 1;\n`\n\nconst Slide = styled.section<{ show?: boolean }>`\n  display: ${props => props.show ? 'block' : 'none'};\n  word-break: break-all;\n`\n\nconst ButtonContainer = styled.div`\n  margin-top: 1.5em;\n  display: flex;\n`\n\nconst Button = styled.button`\n  font-size: 1em;\n  padding: .5em;\n  text-align: center;\n  min-width: 5em;\n  background-color: #DDD;\n  border-radius: 5px;\n  border: none;\n  cursor: pointer;\n\n  &:hover {\n    background-color: #EEE;\n  }\n\n  & + & {\n    margin-left: 1em;\n  }\n`\n\ntype State = {\n  currentSlide: string;\n  clippyVariant: \"\" | \"focus\" | \"rolleye\" | 'angry';\n  projectPhase?: \"idea\" | \"implementation\";\n  targetAudience?: \"bundesebene\" | \"canton\" | \"external\"\n  toolType?: \"dataProcessing\" | \"contentOnly\"\n  sensitiveData?: \"yes\" | \"no\" | \"maybe\"\n  loginNeeded?: \"yes\" | \"no\"\n  apiNeeded?: \"midata\" | \"other\" | \"no\"\n  similarToolAvailable?: \"yes\" | \"no\" | \"maybe\"\n  responsibility?: \"yes\" | \"no\" | \"maybe\"\n}\n\nconst defaultState = (): State => ({ currentSlide: 'projectPhase', clippyVariant: 'focus' })\n\nexport default function NewProjectPage() {\n  const [state, setState] = useState<State>(defaultState)\n  const updateState = (newState: Partial<State>) => setState(prevState => ({ ...prevState, ...newState }))\n  const { t } = useTranslation()\n  const isCurrentSlide = (slide: string) => state.currentSlide === slide;\n\n  return <MainContainer>\n    <Helmet>\n      <title>{t('new_project_page.title')}</title>\n    </Helmet>\n    <h1>Neues Projekt</h1>\n    <ClippyStage variant={state.clippyVariant}>\n      <Slide show={isCurrentSlide(\"projectPhase\")}>\n        <p>{t(\"slides.projectPhase.text\")}</p>\n        <ButtonContainer>\n          <Button type=\"button\" onClick={() => updateState({ currentSlide: 'targetAudience', projectPhase: 'idea' })}>{t(\"slides.projectPhase.buttons.idea\")}</Button>\n          <Button type=\"button\" onClick={() => updateState({ currentSlide: 'targetAudience', projectPhase: 'implementation' })}>{t(\"slides.projectPhase.buttons.implementation\")}</Button>\n        </ButtonContainer>\n      </Slide>\n      <Slide show={isCurrentSlide(\"targetAudience\")}>\n        <p>{t(\"slides.targetAudience.text\")}</p>\n        <ButtonContainer>\n          <Button type=\"button\" onClick={() => updateState({ currentSlide: 'toolType', targetAudience: \"bundesebene\" })}>{t(\"slides.targetAudience.buttons.bundesebene\")}</Button>\n          <Button type=\"button\" onClick={() => updateState({ currentSlide: 'toolType', targetAudience: \"canton\" })}>{t(\"slides.targetAudience.buttons.canton\")}</Button>\n          <Button type=\"button\" onClick={() => updateState({ currentSlide: 'toolType', targetAudience: \"external\" })}> {t(\"slides.targetAudience.buttons.external\")}</Button >\n        </ButtonContainer >\n      </Slide >\n      <Slide show={isCurrentSlide(\"toolType\")}>\n        <p>{t(\"slides.toolType.text\")}</p>\n        <ButtonContainer>\n          <Button type=\"button\" onClick={() => updateState({ currentSlide: 'sensitiveData', toolType: \"dataProcessing\" })}>{t(\"slides.toolType.buttons.dataProcessing\")}</Button>\n          <Button type=\"button\" onClick={() => updateState({ currentSlide: 'sensitiveData', toolType: \"contentOnly\" })}>{t(\"slides.toolType.buttons.contentOnly\")}</Button>\n        </ButtonContainer >\n      </Slide >\n      <Slide show={isCurrentSlide(\"sensitiveData\")}>\n        <p>{t(\"slides.sensitiveData.text\")}</p>\n        <ButtonContainer>\n          <Button type=\"button\" onClick={() => updateState({ currentSlide: 'loginNeeded', sensitiveData: \"yes\" })}>{t(\"slides.sensitiveData.buttons.yes\")}</Button>\n          <Button type=\"button\" onClick={() => updateState({ currentSlide: 'loginNeeded', sensitiveData: \"no\" })}>{t(\"slides.sensitiveData.buttons.no\")}</Button>\n          <Button type=\"button\" onClick={() => updateState({ currentSlide: 'loginNeeded', sensitiveData: \"maybe\" })}> {t(\"slides.sensitiveData.buttons.maybe\")}</Button >\n        </ButtonContainer >\n      </Slide >\n      <Slide show={isCurrentSlide(\"loginNeeded\")}>\n        <p>{t(\"slides.loginNeeded.text\")}</p>\n        <ButtonContainer>\n          <Button type=\"button\" onClick={() => updateState({ currentSlide: 'apiNeeded', loginNeeded: \"yes\" })}>{t(\"slides.loginNeeded.buttons.yes\")}</Button>\n          <Button type=\"button\" onClick={() => updateState({ currentSlide: 'apiNeeded', loginNeeded: \"no\" })}>{t(\"slides.loginNeeded.buttons.no\")}</Button>\n        </ButtonContainer >\n      </Slide >\n      <Slide show={isCurrentSlide(\"apiNeeded\")}>\n        <p>{t(\"slides.apiNeeded.text\")}</p>\n        <ButtonContainer>\n          <Button type=\"button\" onClick={() => updateState({ currentSlide: 'similarToolAvailable', apiNeeded: \"midata\" })}>{t(\"slides.apiNeeded.buttons.midata\")}</Button>\n          <Button type=\"button\" onClick={() => updateState({ currentSlide: 'similarToolAvailable', apiNeeded: \"other\" })}>{t(\"slides.apiNeeded.buttons.other\")}</Button>\n          <Button type=\"button\" onClick={() => updateState({ currentSlide: 'similarToolAvailable', apiNeeded: \"no\" })}>{t(\"slides.apiNeeded.buttons.no\")}</Button>\n        </ButtonContainer >\n      </Slide >\n      <Slide show={isCurrentSlide(\"similarToolAvailable\")}>\n        <p>{t(\"slides.similarToolAvailable.text\")}</p>\n        <ButtonContainer>\n          <Button type=\"button\" onClick={() => updateState({ currentSlide: 'responsibility', similarToolAvailable: \"yes\" })}>{t(\"slides.similarToolAvailable.buttons.yes\")}</Button>\n          <Button type=\"button\" onClick={() => updateState({ currentSlide: 'responsibility', similarToolAvailable: \"no\" })}>{t(\"slides.similarToolAvailable.buttons.no\")}</Button>\n          <Button type=\"button\" onClick={() => updateState({ currentSlide: 'similarToolAvailableMaybe', clippyVariant: 'angry' })}>{t(\"slides.similarToolAvailable.buttons.maybe\")}</Button>\n        </ButtonContainer >\n      </Slide >\n      <Slide show={isCurrentSlide(\"similarToolAvailableMaybe\")}>\n        <p>\n          <Trans t={t}>slides.similarToolAvailableMaybe.text</Trans>\n        </p>\n        <ButtonContainer>\n          <Button type=\"button\" onClick={() => updateState({ currentSlide: 'similarToolAvailable', clippyVariant: \"\" })}>{t(\"slides.similarToolAvailableMaybe.buttons.ok\")}</Button>\n        </ButtonContainer >\n      </Slide >\n      <Slide show={isCurrentSlide(\"responsibility\")}>\n        <p>{t(\"slides.responsibility.text\")}</p>\n        <ButtonContainer>\n          <Button type=\"button\" onClick={() => updateState({ currentSlide: 'evaluation', responsibility: \"yes\" })}>{t(\"slides.responsibility.buttons.yes\")}</Button>\n          <Button type=\"button\" onClick={() => updateState({ currentSlide: 'evaluation', responsibility: \"no\" })}>{t(\"slides.responsibility.buttons.no\")}</Button>\n          <Button type=\"button\" onClick={() => updateState({ currentSlide: 'evaluation', responsibility: \"maybe\" })}>{t(\"slides.responsibility.buttons.maybe\")}</Button>\n        </ButtonContainer >\n      </Slide >\n      <Slide show={isCurrentSlide(\"evaluation\")}>\n        <p>{t(\"slides.evaluation.text\")}</p>\n        <h2>{t(\"slides.evaluation.todo.title\")}</h2>\n        <ul>\n          <li>{t(\"slides.evaluation.todo.contact_itkom\")}</li>\n          {state[\"responsibility\"] !== 'yes' && <li>{t(\"slides.evaluation.todo.define_po\")}</li>}\n          {state[\"apiNeeded\"] === 'midata' && <li>{t(\"slides.evaluation.todo.define_api_consumption\")}</li>}\n          {state[\"similarToolAvailable\"] === 'maybe' && <li>{t(\"slides.evaluation.todo.check_existing\")}</li>}\n          {(state[\"loginNeeded\"] === 'no' && state[\"sensitiveData\"] === 'yes') && <li>{t(\"slides.evaluation.todo.check_login\")}</li>}\n        </ul>\n\n        <h2>{t(\"slides.evaluation.answers.title\")}</h2>\n        {console.log(state)}\n        <p><em>{t('slides.projectPhase.text')}:</em><br /> {t(`slides.projectPhase.buttons.${state.projectPhase}`)}</p>\n        <p><em>{t('slides.targetAudience.text')}:</em><br /> {t(`slides.targetAudience.buttons.${state.targetAudience}`)}</p>\n        <p><em>{t('slides.toolType.text')}:</em><br /> {t(`slides.toolType.buttons.${state.toolType}`)}</p>\n        <p><em>{t('slides.sensitiveData.text')}:</em><br /> {t(`slides.sensitiveData.buttons.${state.sensitiveData}`)}</p>\n        <p><em>{t('slides.loginNeeded.text')}:</em><br /> {t(`slides.loginNeeded.buttons.${state.loginNeeded}`)}</p>\n        <p><em>{t('slides.apiNeeded.text')}:</em><br /> {t(`slides.apiNeeded.buttons.${state.apiNeeded}`)}</p>\n        <p><em>{t('slides.similarToolAvailable.text')}:</em><br /> {t(`slides.similarToolAvailable.buttons.${state.similarToolAvailable}`)}</p>\n        <p><em>{t('slides.responsibility.text')}:</em><br /> {t(`slides.responsibility.buttons.${state.responsibility}`)}</p>\n      </Slide>\n\n    </ClippyStage >\n  </MainContainer >\n}\n","// import styled from '@emotion/styled'\nimport React from 'react'\n// import { useTranslation, Trans } from 'react-i18next';\n// import { Helmet } from 'react-helmet'\n\nexport default function HomePage() {\n  return <>\n    <h1>Hello</h1>\n  </>\n}\n","export default __webpack_public_path__ + \"static/media/footer.744eec6b.svg\";","import styled from '@emotion/styled';\nimport React from 'react';\nimport NewProjectPage from './pages/NewProjectPage'\nimport HomePage from './pages/HomePage'\nimport FooterImage from './images/footer.svg'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\nconst Footer = styled.footer`\n  background-image: url(${FooterImage});\n  background-repeat: repeat-x;\n  height: 236px;\n\n`\n\nfunction App() {\n  return <Router>\n    <Switch>\n      <Route path=\"/new-project\">\n        <HomePage></HomePage>\n      </Route>\n      <Route>\n        <NewProjectPage></NewProjectPage>\n      </Route>\n    </Switch>\n    <Footer></Footer>\n  </Router>\n}\n\nexport default App;\n","import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\n\n// the translations\n// (tip move them in a JSON file and import them,\n// or even better, manage them via a UI: https://react.i18next.com/guides/multiple-translation-files#manage-your-translations-with-a-management-gui)\nconst resources = {\n  en: {\n    translation: {\n      new_project_page: {\n        title: 'Neues Projekt'\n      },\n      slides: {\n        evaluation: {\n          text: 'Danke fürs ausfüllen.',\n          todo: {\n            title: 'ToDo',\n            contact_itkom: 'Kontakt aufnehmen mit der IT-Kom',\n            define_po: 'Verantwortliche Person definieren',\n            define_api_consumption: 'Definieren welche Daten von der MiData benötigt werden',\n            check_existing: 'Herausfinden ob es nicht doch schon ähnliche Tools gibt',\n            check_login: 'Abklären ob es wirklich kein Login braucht'\n          },\n          answers: {\n            title: 'Antworten'\n          }\n        },\n        projectPhase: {\n          text: 'In welcher Phase des Projekts befindest du dich?',\n          buttons: {\n            idea: 'Idee',\n            implementation: 'Umsetzung'\n          }\n        },\n        targetAudience: {\n          text: 'Wer ist das Zielpublikum?',\n          buttons: {\n            bundesebene: 'Bundesebene',\n            canton: 'Kantone',\n            external: 'Externe (z.B. Eltern)'\n          }\n        },\n        toolType: {\n          text: 'Werden Daten verarbeitet oder werden nur Inhalte dargestellt?',\n          buttons: {\n            dataProcessing: 'Daten verarbeiten',\n            contentOnly: 'Nur Inhalte'\n          }\n        },\n        loginNeeded: {\n          text: 'Muss man sich einloggen können?',\n          buttons: {\n            yes: 'Ja',\n            no: 'Nein'\n          }\n        },\n        sensitiveData: {\n          text: 'Werden schützenswerte Daten verarbeitet?',\n          buttons: {\n            yes: 'Ja',\n            no: 'Nein',\n            maybe: 'Glaubs nöd'\n          }\n        },\n        apiNeeded: {\n          text: 'Werden Daten von anderen IT-Tools benötigt?',\n          buttons: {\n            midata: 'Ja, von der MiData',\n            other: 'Ein anderes Tool',\n            no: 'Nein, braucht es nicht'\n          }\n        },\n        similarToolAvailable: {\n          text: 'Gibt es bereits ein ähnliches Tool in dieser Art (gratis oder kostenpflichtig)?',\n          buttons: {\n            yes: 'Ja, das gibts',\n            no: 'Nein, gibt es nicht',\n            maybe: 'Keine Ahnung'\n          }\n        },\n        similarToolAvailableMaybe: {\n          text: 'Dann kläre das doch bitte zuerst ab, bevor du ein neues Projekt startest!',\n          buttons: {\n            ok: 'Ok'\n          }\n        },\n        responsibility: {\n          text: 'Ist eine verantwortliche Person definiert?',\n          buttons: {\n            yes: 'Ja, ist klar',\n            no: 'Nein, noch nicht',\n            maybe: 'Wir brauchen das nicht'\n          }\n        }\n      }\n    }\n  },\n  fr: {\n    translation: {\n      'Welcome to React': 'Bienvenue à React et react-i18next'\n    }\n  }\n};\n\ni18n\n  .use(initReactI18next) // passes i18n down to react-i18next\n  .init({\n    resources,\n    lng: 'en', // language to use, more information here: https://www.i18next.com/overview/configuration-options#languages-namespaces-resources\n    // you can use the i18n.changeLanguage function to change the language manually: https://www.i18next.com/overview/api#changelanguage\n\n    interpolation: {\n      escapeValue: false // react already safes from xss\n    }\n  });\n\nexport default i18n;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.less';\nimport App from './App';\nimport './i18n/'\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}