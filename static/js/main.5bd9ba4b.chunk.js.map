{"version":3,"sources":["components/Clippy.tsx","components/ClippyStage.tsx","pages/NewProjectPage.tsx","images/footer.svg","App.tsx","i18n/index.ts","reportWebVitals.ts","index.tsx"],"names":["blink","keyframes","rolleye","focus","StyledSvg","Clippy","variant","className","viewBox","fill","xmlns","d","stroke","strokeWidth","cx","cy","r","id","x1","y1","x2","y2","gradientUnits","stopColor","offset","Container","ContentContainer","ClippyContainer","ClippyStage","children","MainContainer","ButtonContainer","Button","slides","state","setState","Slide","key","text","choices","mutator","prevState","projectPhase","currentSlide","defaultState","clippyVariant","t","useTranslation","map","choice","onClick","type","NewProjectPage","useState","slide","Footer","FooterImage","App","i18n","use","initReactI18next","init","resources","en","translation","question","answers","idea","implementation","targetAudience","bundesebene","canton","external","toolType","dataProcessing","contentOnly","loginNeeded","yes","no","fr","lng","interpolation","escapeValue","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5bd9ba4b.chunk.js","sourcesContent":["import React from 'react'\nimport styled from '@emotion/styled'\nimport { keyframes } from '@emotion/react'\n\nconst blink = keyframes`\n  from, 8%, 12%, to {\n    fill: black;\n  }\n  10% {\n    fill: transparent;\n  }\n  `\n\nconst rolleye = keyframes`\n  from, 8%, 12%, 16%, , 20%, 30%, 50%, to  {\n    transform: translate(0, 0);\n    fill: black;\n  }\n  10%, 18% {\n    fill: transparent;\n  }\n  35%, 45% {\n    transform: translate(0, -15px)\n  }\n  `\nconst focus = keyframes`\n  from, 8%, 12%, 30%, 70%, 88%, 92%, to  {\n    transform: translate(0, 0);\n    fill: black;\n  }\n  10%, 90% {\n    fill: transparent;\n  }\n  35%, 65% {\n    transform: translate(-8px, -8px)\n  }\n  `\n\nconst StyledSvg = styled.svg`\n\nwidth: 10vh  ;\n\n  .pupil {\n    animation: ${blink} 3s ease infinite;\n    transition: translate;\n  }\n\n  &.rolleye {\n    .pupil {\n      animation: ${rolleye} 5s ease-in-out infinite;\n    }\n  }\n\n  &.focus {\n    .pupil {\n      animation: ${focus} 5s ease-in-out infinite;\n    }\n  }\n`\n\ninterface ClippyProps {\n  variant?: string\n}\n\nexport default function Clippy({ variant }: ClippyProps) {\n  return <StyledSvg className={variant} viewBox=\"0 0 91 248\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M31 104C31 104 31 128.5 31 156C31 183.5 66 184 66 156C66 128 66 84.5 66 40C66 -4.5 19 -9.5 19 40C19 89.5 19 151 19 199C19 247 78 248 78 199C78 150 78 104 78 104\" stroke=\"#A7A7A7\" strokeWidth=\"8\" />\n    <circle className=\"eye\" cx=\"20\" cy=\"74\" r=\"19.5\" fill=\"url(#paint0_linear)\" stroke=\"black\" />\n    <circle className=\"pupil\" cx=\"19.5\" cy=\"73.5\" r=\"4.5\" fill=\"black\" />\n    <circle className=\"eye\" cx=\"71\" cy=\"74\" r=\"19.5\" fill=\"url(#paint1_linear)\" stroke=\"black\" />\n    <circle className=\"pupil\" cx=\"70.5\" cy=\"73.5\" r=\"4.5\" fill=\"black\" />\n    <defs>\n      <linearGradient id=\"paint0_linear\" x1=\"11.5\" y1=\"65\" x2=\"29\" y2=\"94\" gradientUnits=\"userSpaceOnUse\">\n        <stop stopColor=\"#F2F2F2\" />\n        <stop offset=\"1\" stopColor=\"#CECECE\" />\n      </linearGradient>\n      <linearGradient id=\"paint1_linear\" x1=\"62.5\" y1=\"65\" x2=\"80\" y2=\"94\" gradientUnits=\"userSpaceOnUse\">\n        <stop stopColor=\"#F2F2F2\" />\n        <stop offset=\"1\" stopColor=\"#CECECE\" />\n      </linearGradient>\n    </defs>\n  </StyledSvg>\n\n}\n","import React, { PropsWithChildren } from 'react'\nimport styled from '@emotion/styled'\nimport Clippy from './Clippy'\n\nconst Container = styled.div`\n  background: url(\"data:image/svg+xml,<svg width='779' height='468' viewBox='0 0 779 468' fill='none' xmlns='http://www.w3.org/2000/svg'><ellipse cx='389.5' cy='234' rx='389.5' ry='234' fill='rgb(255,255,255)' fill-opacity='0.1'/></svg>\");\n  background-size: contain;\n  background-repeat: no-repeat;\n  background-position: center;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  justify-content: space-evenly;\n  max-width: 800px;\n  margin: 0 auto;\n`\n\nconst ContentContainer = styled.div`\n  background-color: white;\n  border-radius: 1em;\n  box-shadow: .5em .5em 2em rgba(0,0,0,0.25);\n  color: black;\n  padding: 1em;\n  margin-bottom: 2em;\n  width: 80%;\n`\n\nconst ClippyContainer = styled.div`\n  text-align: right;\n`\n\ntype ClippyStageProps = PropsWithChildren<{\n  variant?: string;\n}>\n\nexport default function ClippyStage({ children, variant }: ClippyStageProps) {\n  return <Container>\n    <ContentContainer>\n      {children}\n    </ContentContainer>\n    <ClippyContainer>\n      <Clippy variant={variant}></Clippy>\n    </ClippyContainer>\n  </Container>\n}\n","import styled from '@emotion/styled'\nimport React, { ReactNode, SetStateAction, useState } from 'react'\nimport ClippyStage from '../components/ClippyStage'\nimport { useTranslation } from 'react-i18next';\n\nconst MainContainer = styled.main`\n  padding: 1rem;\n  flex-grow: 1;\n`\n\nconst ButtonContainer = styled.div`\n  margin-top: 1.5em;\n  display: flex;\n`\n\nconst Button = styled.button`\n  font-size: 1em;\n  padding: .5em;\n  text-align: center;\n  min-width: 5em;\n  background-color: #DDD;\n  border-radius: 5px;\n  border: none;\n\n  &:hover {\n    background-color: #EEE;\n  }\n\n  & + & {\n    margin-left: 1em;\n  }\n`\n\ntype State = {\n  currentSlide: string;\n  clippyVariant: \"\" | \"focus\" | \"rolleye\";\n  projectPhase?: \"idea\" | \"implementation\";\n}\n\ntype SlideProps = {\n  text: string;\n  choices: ChoiceType[];\n}\n\ntype Slidable = (state: State, setState: React.Dispatch<SetStateAction<State>>) => ReactNode\n\ninterface ChoiceType {\n  // key: string;\n  text: string;\n  mutator: () => void;\n}\n\nconst slides: { [key: string]: Slidable } = {\n  \"projectPhase\": (state, setState) => <Slide key=\"projectPhase\"\n    text=\"slides.projectPhase.question\"\n    choices={[\n      { text: \"slides.projectPhase.answers.idea\", mutator: () => setState(prevState => ({ ...prevState, projectPhase: 'idea', currentSlide: 'targetAudience' })) },\n      { text: \"slides.projectPhase.answers.implementation\", mutator: () => setState(prevState => ({ ...prevState, projectPhase: 'implementation', currentSlide: 'targetAudience' })) },\n    ]}></Slide>,\n  \"targetAudience\": (state, setState) => <Slide key=\"targetAudience\"\n    text=\"slides.targetAudience.question\"\n    choices={[\n      { text: \"slides.targetAudience.answers.bundesebene\", mutator: () => setState(prevState => ({ ...prevState, currentSlide: 'toolType' })) },\n      { text: \"slides.targetAudience.answers.canton\", mutator: () => setState(prevState => ({ ...prevState, currentSlide: 'toolType' })) },\n      { text: \"slides.targetAudience.answers.external\", mutator: () => setState(prevState => ({ ...prevState, currentSlide: 'toolType' })) },\n    ]}></Slide>,\n  \"toolType\": (state, setState) => <Slide key=\"toolType\"\n    text=\"slides.toolType.question\"\n    choices={[\n      { text: \"slides.toolType.answers.dataProcessing\", mutator: () => setState(prevState => ({ ...prevState, currentSlide: 'loginNeeded' })) },\n      { text: \"slides.toolType.answers.contentOnly\", mutator: () => setState(prevState => ({ ...prevState, currentSlide: 'loginNeeded' })) },\n    ]}></Slide>,\n  \"loginNeeded\": (state, setState) => <Slide key=\"loginNeeded\"\n    text=\"slides.loginNeeded.question\"\n    choices={[\n      { text: \"slides.loginNeeded.answers.yes\", mutator: () => setState(prevState => ({ ...prevState, currentSlide: '' })) },\n      { text: \"slides.loginNeeded.answers.no\", mutator: () => setState(prevState => ({ ...prevState, currentSlide: '' })) },\n    ]}></Slide>,\n}\n\nconst defaultState = (): State => ({ currentSlide: 'projectPhase', clippyVariant: 'focus' })\n\nfunction Slide({ text, choices }: SlideProps) {\n  const { t } = useTranslation();\n\n\n  return <>\n    <p>{t(text)}</p>\n    <ButtonContainer>\n      {choices.map(choice => <Button onClick={() => choice.mutator()} type=\"button\">{t(choice.text)}</Button>)}\n    </ButtonContainer>\n  </>\n}\n\nexport default function NewProjectPage() {\n  const [state, setState] = useState<State>(defaultState)\n  const slide = slides[state.currentSlide]\n\n  return <MainContainer>\n    <h1>Neues Projekt</h1>\n    {<ClippyStage variant={state.clippyVariant}>\n      {slide != null && slide(state, setState)}\n    </ClippyStage>}\n  </MainContainer>\n}\n","export default __webpack_public_path__ + \"static/media/footer.744eec6b.svg\";","import styled from '@emotion/styled';\nimport React from 'react';\nimport NewProjectPage from './pages/NewProjectPage'\nimport FooterImage from './images/footer.svg'\n\nconst Footer = styled.footer`\n  background-image: url(${FooterImage});\n  background-repeat: repeat-x;\n  height: 236px;\n\n`\n\nfunction App() {\n  return <>\n    <NewProjectPage></NewProjectPage>\n    <Footer></Footer>\n  </>\n}\n\nexport default App;\n","import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\n\n// the translations\n// (tip move them in a JSON file and import them,\n// or even better, manage them via a UI: https://react.i18next.com/guides/multiple-translation-files#manage-your-translations-with-a-management-gui)\nconst resources = {\n  en: {\n    translation: {\n      slides: {\n        projectPhase: {\n          question: 'In welcher Phase des Projekts befindest du dich?',\n          answers: {\n            idea: 'Idee',\n            implementation: 'Umsetzung'\n          }\n        },\n        targetAudience: {\n          question: 'Wer ist das Zielpublikum?',\n          answers: {\n            bundesebene: 'Bundesebene',\n            canton: 'Kantone',\n            external: 'Externe (z.B. Eltern)'\n          }\n        },\n        toolType: {\n          question: 'Werden Daten verarbeitet oder werden nur Inhalte dargestellt?',\n          answers: {\n            dataProcessing: 'Daten verarbeiten',\n            contentOnly: 'Nur Inhalte'\n          }\n        },\n        loginNeeded: {\n          question: 'Muss man sich einloggen können?',\n          answers: {\n            yes: 'Ja',\n            no: 'Nein',\n          }\n        }\n      },\n    }\n  },\n  fr: {\n    translation: {\n      'Welcome to React': 'Bienvenue à React et react-i18next'\n    }\n  }\n};\n\ni18n\n  .use(initReactI18next) // passes i18n down to react-i18next\n  .init({\n    resources,\n    lng: 'en', // language to use, more information here: https://www.i18next.com/overview/configuration-options#languages-namespaces-resources\n    // you can use the i18n.changeLanguage function to change the language manually: https://www.i18next.com/overview/api#changelanguage\n\n    interpolation: {\n      escapeValue: false // react already safes from xss\n    }\n  });\n\nexport default i18n;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.less';\nimport App from './App';\nimport './i18n/'\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}